{
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "https://canvas.instructure.com/api",
    "resourcePath": "",
    "produces": [],
    "apis": [
      {
        "path": "/v1/accounts/{account_id}/account_notifications",
        "description": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
        "operations": [
          {
            "method": "GET",
            "summary": "Index of active global notification for the user",
            "notes": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned, unless\na include_past parameter is passed in as true.",
            "nickname": "index_of_active_global_notification_for_user",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include_past",
                "description": "Include past and dismissed global announcements.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AccountNotification"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/account_notifications/{id}",
        "description": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
        "operations": [
          {
            "method": "GET",
            "summary": "Show a global notification",
            "notes": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
            "nickname": "show_global_notification",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AccountNotification"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/account_notifications/{id}",
        "description": "If the current user no long wants to see this notification it can be excused with this call",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Close notification for user",
            "notes": "If the current user no long wants to see this notification it can be excused with this call",
            "nickname": "close_notification_for_user",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AccountNotification"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/account_notifications",
        "description": "Create and return a new global notification for an account.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create a global notification",
            "notes": "Create and return a new global notification for an account.",
            "nickname": "create_global_notification",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[subject]",
                "description": "The subject of the notification.",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[message]",
                "description": "The message body of the notification.",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[start_at]",
                "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                "type": "DateTime",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[end_at]",
                "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                "type": "DateTime",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[icon]",
                "description": "The icon to display with the notification.\nNote: Defaults to warning.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "warning",
                  "information",
                  "question",
                  "error",
                  "calendar"
                ]
              },
              {
                "paramType": "form",
                "name": "account_notification_roles",
                "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/account_notifications/{id}",
        "description": "Update global notification for an account.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Update a global notification",
            "notes": "Update global notification for an account.",
            "nickname": "update_global_notification",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[subject]",
                "description": "The subject of the notification.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[message]",
                "description": "The message body of the notification.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[start_at]",
                "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[end_at]",
                "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account_notification[icon]",
                "description": "The icon to display with the notification.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "warning",
                  "information",
                  "question",
                  "error",
                  "calendar"
                ]
              },
              {
                "paramType": "form",
                "name": "account_notification_roles",
                "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/search",
        "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
        "operations": [
          {
            "method": "GET",
            "summary": "Search account domains",
            "notes": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
            "nickname": "search_account_domains",
            "parameters": [
              {
                "paramType": "query",
                "name": "name",
                "description": "campus name",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "domain",
                "description": "no description",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "latitude",
                "description": "no description",
                "type": "number",
                "format": "float",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "longitude",
                "description": "no description",
                "type": "number",
                "format": "float",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/reports",
        "description": "Returns a paginated list of reports for the current context.",
        "operations": [
          {
            "method": "GET",
            "summary": "List Available Reports",
            "notes": "Returns a paginated list of reports for the current context.",
            "nickname": "list_available_reports",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [
              {
                "name": "name",
                "description": "The name of the report.",
                "deprecated": false
              },
              {
                "name": "parameters",
                "description": "The parameters will vary for each report",
                "deprecated": false
              }
            ],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/reports/{report}",
        "description": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
        "operations": [
          {
            "method": "POST",
            "summary": "Start a Report",
            "notes": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
            "nickname": "start_report",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "report",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "parameters",
                "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "parameters[skip_message]",
                "description": "If true, no message will be sent\nto the user upon completion of the report.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "parameters[course_id]",
                "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "parameters[users]",
                "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Report"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/reports/{report}",
        "description": "Shows all reports that have been run for the account of a specific type.",
        "operations": [
          {
            "method": "GET",
            "summary": "Index of Reports",
            "notes": "Shows all reports that have been run for the account of a specific type.",
            "nickname": "index_of_reports",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "report",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Report"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
        "description": "Returns the status of a report.",
        "operations": [
          {
            "method": "GET",
            "summary": "Status of a Report",
            "notes": "Returns the status of a report.",
            "nickname": "status_of_report",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "report",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Report"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/reports/{report}/{id}",
        "description": "Deletes a generated report instance.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete a Report",
            "notes": "Deletes a generated report instance.",
            "nickname": "delete_report",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "report",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Report"
          }
        ]
      },
      {
        "path": "/v1/accounts",
        "description": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
        "operations": [
          {
            "method": "GET",
            "summary": "List accounts",
            "notes": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
            "nickname": "list_accounts",
            "parameters": [
              {
                "paramType": "query",
                "name": "include",
                "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "lti_guid",
                  "registration_settings",
                  "services"
                ],
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Account"
            }
          }
        ]
      },
      {
        "path": "/v1/manageable_accounts",
        "description": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get accounts that admins can manage",
            "notes": "A paginated list of accounts where the current user has permission to create\nor manage courses. List will be empty for students and teachers as only admins\ncan view which accounts they are in.",
            "nickname": "get_accounts_that_admins_can_manage",
            "parameters": [],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Account"
            }
          }
        ]
      },
      {
        "path": "/v1/course_accounts",
        "description": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
        "operations": [
          {
            "method": "GET",
            "summary": "List accounts for course admins",
            "notes": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
            "nickname": "list_accounts_for_course_admins",
            "parameters": [],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Account"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{id}",
        "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get a single account",
            "notes": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
            "nickname": "get_single_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Account"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/settings",
        "description": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
        "operations": [
          {
            "method": "GET",
            "summary": "Settings",
            "notes": "Returns settings for the specified account as a JSON object. The caller must be an Account\nadmin with the manage_account_settings permission.",
            "nickname": "settings",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/permissions",
        "description": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
        "operations": [
          {
            "method": "GET",
            "summary": "Permissions",
            "notes": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
            "nickname": "permissions",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "permissions",
                "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/sub_accounts",
        "description": "List accounts that are sub-accounts of the given account.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get the sub-accounts of an account",
            "notes": "List accounts that are sub-accounts of the given account.",
            "nickname": "get_sub_accounts_of_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "recursive",
                "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Account"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/terms_of_service",
        "description": "Returns the terms of service for that account",
        "operations": [
          {
            "method": "GET",
            "summary": "Get the Terms of Service",
            "notes": "Returns the terms of service for that account",
            "nickname": "get_terms_of_service",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "TermsOfService"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/help_links",
        "description": "Returns the help links for that account",
        "operations": [
          {
            "method": "GET",
            "summary": "Get help links",
            "notes": "Returns the help links for that account",
            "nickname": "get_help_links",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "HelpLinks"
          }
        ]
      },
      {
        "path": "/v1/manually_created_courses_account",
        "description": "",
        "operations": [
          {
            "method": "GET",
            "summary": "Get the manually-created courses sub-account for the domain root account",
            "notes": "",
            "nickname": "get_manually_created_courses_sub_account_for_domain_root_account",
            "parameters": [],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Account"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/courses",
        "description": "Retrieve a paginated list of courses in this account.",
        "operations": [
          {
            "method": "GET",
            "summary": "List active courses in an account",
            "notes": "Retrieve a paginated list of courses in this account.",
            "nickname": "list_active_courses_in_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "with_enrollments",
                "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter\non course enrollment status.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "enrollment_type",
                "description": "If set, only return courses that have at least one user enrolled in\nin the course with one of the specified enrollment types.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "teacher",
                  "student",
                  "ta",
                  "observer",
                  "designer"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "published",
                "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "completed",
                "description": "If true, include only completed courses (these may be in state\n'completed', or their enrollment term may have ended).  If false, exclude\ncompleted courses.  If not present, do not filter on completed status.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "blueprint",
                "description": "If true, include only blueprint courses. If false, exclude them.\nIf not present, do not filter on this basis.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "blueprint_associated",
                "description": "If true, include only courses that inherit content from a blueprint course.\nIf false, exclude them. If not present, do not filter on this basis.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "by_teachers",
                "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users.",
                "type": "array",
                "format": "int64",
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              },
              {
                "paramType": "query",
                "name": "by_subaccounts",
                "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts.",
                "type": "array",
                "format": "int64",
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              },
              {
                "paramType": "query",
                "name": "hide_enrollmentless_courses",
                "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "state",
                "description": "If set, only return courses that are in the given state(s). By default,\nall states but \"deleted\" are returned.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "created",
                  "claimed",
                  "available",
                  "completed",
                  "deleted",
                  "all"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "enrollment_term_id",
                "description": "If set, only includes courses from the specified term.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "search_term",
                "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}\n- \"sections\", \"needs_grading_count\" and \"total_scores\" are not valid options at the account level",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "syllabus_body",
                  "term",
                  "course_progress",
                  "storage_quota_used_mb",
                  "total_students",
                  "teachers",
                  "account_name",
                  "concluded"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "sort",
                "description": "The column to sort results by.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "course_name",
                  "sis_course_id",
                  "teacher",
                  "account_name"
                ]
              },
              {
                "paramType": "query",
                "name": "order",
                "description": "The order to sort the given column by.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              {
                "paramType": "query",
                "name": "search_by",
                "description": "The filter to search by. \"course\" searches for course names, course codes,\nand SIS IDs. \"teacher\" searches for teacher names",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "course",
                  "teacher"
                ]
              },
              {
                "paramType": "query",
                "name": "starts_before",
                "description": "If set, only return courses that start before the value (inclusive)\nor their enrollment term starts before the value (inclusive)\nor both the course's start_at and the enrollment term's start_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                "type": "Date",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "ends_after",
                "description": "If set, only return courses that end after the value (inclusive)\nor their enrollment term ends after the value (inclusive)\nor both the course's end_at and the enrollment term's end_at are set to null.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                "type": "Date",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "homeroom",
                "description": "If set, only return homeroom courses.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Course"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{id}",
        "description": "Update an existing account.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Update an account",
            "notes": "Update an existing account.",
            "nickname": "update_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[name]",
                "description": "Updates the account name",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[sis_account_id]",
                "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_time_zone]",
                "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_storage_quota_mb]",
                "description": "The default course storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_user_storage_quota_mb]",
                "description": "The default user storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_group_storage_quota_mb]",
                "description": "The default group storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[course_template_id]",
                "description": "The ID of a course to be used as a template for all newly created courses.\nEmpty means to inherit the setting from parent account, 0 means to not\nuse a template even if a parent account has one set. The course must be\nmarked as a template.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_past_view][value]",
                "description": "Restrict students from viewing courses after end date",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_past_view][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_future_view][value]",
                "description": "Restrict students from viewing courses before start date",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][microsoft_sync_enabled]",
                "description": "Determines whether this account has Microsoft Teams Sync enabled or not.\n\nNote that if you are altering Microsoft Teams sync settings you must enable\nthe Microsoft Group enrollment syncing feature flag. In addition, if you are enabling\nMicrosoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute.\nSpecifying a suffix to use is optional.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][microsoft_sync_tenant]",
                "description": "The tenant this account should use when using Microsoft Teams Sync.\nThis should be an Azure Active Directory domain name.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][microsoft_sync_login_attribute]",
                "description": "The attribute this account should use to lookup users when using Microsoft Teams Sync.\nMust be one of \"sub\", \"email\", \"oid\", \"preferred_username\", or \"integration_id\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][microsoft_sync_login_attribute_suffix]",
                "description": "A suffix that will be appended to the result of the login attribute when associating\nCanvas users with Microsoft users. Must be under 255 characters and contain no whitespace.\nThis field is optional.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][microsoft_sync_remote_attribute]",
                "description": "The Active Directory attribute to use when associating Canvas users with Microsoft users.\nMust be one of \"mail\", \"mailNickname\", or \"userPrincipalName\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_future_view][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][lock_all_announcements][value]",
                "description": "Disable comments on announcements",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][lock_all_announcements][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][usage_rights_required][value]",
                "description": "Copyright and license information must be provided for files before they are published.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][usage_rights_required][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_future_listing][value]",
                "description": "Restrict students from viewing future enrollments in course list",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][restrict_student_future_listing][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][conditional_release][value]",
                "description": "Enable or disable individual learning paths for students based on assessment",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][conditional_release][locked]",
                "description": "Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][lock_outcome_proficiency][value]",
                "description": "[DEPRECATED] Restrict instructors from changing mastery scale",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[lock_outcome_proficiency][locked]",
                "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[settings][lock_proficiency_calculation][value]",
                "description": "[DEPRECATED] Restrict instructors from changing proficiency calculation method",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[lock_proficiency_calculation][locked]",
                "description": "[DEPRECATED] Lock this setting for sub-accounts and courses",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[services]",
                "description": "Give this a set of keys and boolean values to enable or disable services matching the keys",
                "type": "Hash",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Account"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/users/{user_id}",
        "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete a user from the root account",
            "notes": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
            "nickname": "delete_user_from_root_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "user_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "User"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/sub_accounts",
        "description": "Add a new sub-account to a given account.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create a new sub-account",
            "notes": "Add a new sub-account to a given account.",
            "nickname": "create_new_sub_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[name]",
                "description": "The name of the new sub-account.",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[sis_account_id]",
                "description": "The account's identifier in the Student Information System.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_storage_quota_mb]",
                "description": "The default course storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_user_storage_quota_mb]",
                "description": "The default user storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "account[default_group_storage_quota_mb]",
                "description": "The default group storage quota to be used, if not otherwise specified.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Account"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/sub_accounts/{id}",
        "description": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete a sub-account",
            "notes": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
            "nickname": "delete_sub_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Account"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/admins",
        "description": "Flag an existing user as an admin within the account.",
        "operations": [
          {
            "method": "POST",
            "summary": "Make an account admin",
            "notes": "Flag an existing user as an admin within the account.",
            "nickname": "make_account_admin",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "user_id",
                "description": "The id of the user to promote.",
                "type": "integer",
                "format": "int64",
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "role",
                "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "role_id",
                "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "send_confirmation",
                "description": "Send a notification email to\nthe new admin if true. Default is true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Admin"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/admins/{user_id}",
        "description": "Remove the rights associated with an account admin role from a user.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Remove account admin",
            "notes": "Remove the rights associated with an account admin role from a user.",
            "nickname": "remove_account_admin",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "user_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "role",
                "description": "[DEPRECATED] Account role to remove from the user. Defaults to\n'AccountAdmin'. Any other account role must be specified explicitly.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "role_id",
                "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Admin"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/admins",
        "description": "A paginated list of the admins in the account",
        "operations": [
          {
            "method": "GET",
            "summary": "List account admins",
            "notes": "A paginated list of the admins in the account",
            "nickname": "list_account_admins",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "user_id",
                "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "$ref": "[Integer]"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Admin"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level participation data",
            "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "nickname": "get_department_level_participation_data_terms",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "term_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/current/activity",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level participation data",
            "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "nickname": "get_department_level_participation_data_current",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/completed/activity",
        "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level participation data",
            "notes": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
            "nickname": "get_department_level_participation_data_completed",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level grade data",
            "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_grade_data_terms",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "term_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/current/grades",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level grade data",
            "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_grade_data_current",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/completed/grades",
        "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level grade data",
            "notes": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_grade_data_completed",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics",
            "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_terms",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "term_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/current/statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics",
            "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_current",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/completed/statistics",
        "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics",
            "notes": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_completed",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics_by_subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics, broken down by subaccount",
            "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_broken_down_by_subaccount_terms",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "term_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/current/statistics_by_subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics, broken down by subaccount",
            "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_broken_down_by_subaccount_current",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/analytics/completed/statistics_by_subaccount",
        "description": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get department-level statistics, broken down by subaccount",
            "notes": "Returns numeric statistics about the department subaccounts and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
            "nickname": "get_department_level_statistics_broken_down_by_subaccount_completed",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/activity",
        "description": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
        "operations": [
          {
            "method": "GET",
            "summary": "Get course-level participation data",
            "notes": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
            "nickname": "get_course_level_participation_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/assignments",
        "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get course-level assignment data",
            "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
            "nickname": "get_course_level_assignment_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "async",
                "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/student_summaries",
        "description": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
        "operations": [
          {
            "method": "GET",
            "summary": "Get course-level student summary data",
            "notes": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
            "nickname": "get_course_level_student_summary_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "sort_column",
                "description": "The order results in which results are returned.  Defaults to \"name\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "name",
                  "name_descending",
                  "score",
                  "score_descending",
                  "participations",
                  "participations_descending",
                  "page_views",
                  "page_views_descending"
                ]
              },
              {
                "paramType": "query",
                "name": "student_id",
                "description": "If set, returns only the specified student.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/users/{student_id}/activity",
        "description": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get user-in-a-course-level participation data",
            "notes": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
            "nickname": "get_user_in_a_course_level_participation_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "student_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/users/{student_id}/assignments",
        "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get user-in-a-course-level assignment data",
            "notes": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
            "nickname": "get_user_in_a_course_level_assignment_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "student_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/analytics/users/{student_id}/communication",
        "description": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get user-in-a-course-level messaging data",
            "notes": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
            "nickname": "get_user_in_a_course_level_messaging_data",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "student_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/external_feeds",
        "description": "Returns the paginated list of External Feeds this course or group.",
        "operations": [
          {
            "method": "GET",
            "summary": "List external feeds",
            "notes": "Returns the paginated list of External Feeds this course or group.",
            "nickname": "list_external_feeds_courses",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "ExternalFeed"
            }
          }
        ]
      },
      {
        "path": "/v1/groups/{group_id}/external_feeds",
        "description": "Returns the paginated list of External Feeds this course or group.",
        "operations": [
          {
            "method": "GET",
            "summary": "List external feeds",
            "notes": "Returns the paginated list of External Feeds this course or group.",
            "nickname": "list_external_feeds_groups",
            "parameters": [
              {
                "paramType": "path",
                "name": "group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "ExternalFeed"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/external_feeds",
        "description": "Create a new external feed for the course or group.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an external feed",
            "notes": "Create a new external feed for the course or group.",
            "nickname": "create_external_feed_courses",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "url",
                "description": "The url to the external rss or atom feed",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "header_match",
                "description": "If given, only feed entries that contain this string in their title will be imported",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "verbosity",
                "description": "Defaults to \"full\"",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "full",
                  "truncate",
                  "link_only"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "ExternalFeed"
          }
        ]
      },
      {
        "path": "/v1/groups/{group_id}/external_feeds",
        "description": "Create a new external feed for the course or group.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an external feed",
            "notes": "Create a new external feed for the course or group.",
            "nickname": "create_external_feed_groups",
            "parameters": [
              {
                "paramType": "path",
                "name": "group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "url",
                "description": "The url to the external rss or atom feed",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "header_match",
                "description": "If given, only feed entries that contain this string in their title will be imported",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "verbosity",
                "description": "Defaults to \"full\"",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "full",
                  "truncate",
                  "link_only"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "ExternalFeed"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/external_feeds/{external_feed_id}",
        "description": "Deletes the external feed.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete an external feed",
            "notes": "Deletes the external feed.",
            "nickname": "delete_external_feed_courses",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "external_feed_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "ExternalFeed"
          }
        ]
      },
      {
        "path": "/v1/groups/{group_id}/external_feeds/{external_feed_id}",
        "description": "Deletes the external feed.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete an external feed",
            "notes": "Deletes the external feed.",
            "nickname": "delete_external_feed_groups",
            "parameters": [
              {
                "paramType": "path",
                "name": "group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "external_feed_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "ExternalFeed"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/extensions",
        "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
        "operations": [
          {
            "method": "POST",
            "summary": "Set extensions for student assignment submissions",
            "notes": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend assignments for this course\n* <b>400 Bad Request</b> if any of the extensions are invalid",
            "nickname": "set_extensions_for_student_assignment_submissions",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_extensions[user_id]",
                "description": "The ID of the user we want to add assignment extensions for.",
                "type": "array",
                "format": "int64",
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              },
              {
                "paramType": "form",
                "name": "assignment_extensions[extra_attempts]",
                "description": "Number of times the student is allowed to re-take the assignment over the\nlimit.",
                "type": "array",
                "format": "int64",
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups",
        "description": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
        "operations": [
          {
            "method": "GET",
            "summary": "List assignment groups",
            "notes": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
            "nickname": "list_assignment_groups",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\",\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\n\"score_statistics\" requires that the \"assignments\" and \"submission\" options are included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.\nIf \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "assignments",
                  "discussion_topic",
                  "all_dates",
                  "assignment_visibility",
                  "overrides",
                  "submission",
                  "observed_users",
                  "can_edit",
                  "score_statistics"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "assignment_ids",
                "description": "If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as\na comma separated string.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "exclude_assignment_submission_types",
                "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "online_quiz",
                  "discussion_topic",
                  "wiki_page",
                  "external_tool"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "override_assignment_dates",
                "description": "Apply assignment overrides for each assignment, defaults to true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "grading_period_id",
                "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "scope_assignments_to_student",
                "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AssignmentGroup"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
        "description": "Returns the assignment group with the given id.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get an Assignment Group",
            "notes": "Returns the assignment group with the given id.",
            "nickname": "get_assignment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and\n\"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments\ncourse feature be turned on.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "assignments",
                  "discussion_topic",
                  "assignment_visibility",
                  "submission",
                  "score_statistics"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "override_assignment_dates",
                "description": "Apply assignment overrides for each assignment, defaults to true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "grading_period_id",
                "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentGroup"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups",
        "description": "Create a new assignment group for this course.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an Assignment Group",
            "notes": "Create a new assignment group for this course.",
            "nickname": "create_assignment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "name",
                "description": "The assignment group's name",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "position",
                "description": "The position of this assignment group in relation to the other assignment groups",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "group_weight",
                "description": "The percent of the total grade that this assignment group represents",
                "type": "number",
                "format": "float",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "sis_source_id",
                "description": "The sis source id of the Assignment Group",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "integration_data",
                "description": "The integration data of the Assignment Group",
                "type": "Object",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "rules",
                "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentGroup"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
        "description": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
        "operations": [
          {
            "method": "PUT",
            "summary": "Edit an Assignment Group",
            "notes": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
            "nickname": "edit_assignment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentGroup"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
        "description": "Deletes the assignment group with the given id.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Destroy an Assignment Group",
            "notes": "Deletes the assignment group with the given id.",
            "nickname": "destroy_assignment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "move_assignments_to",
                "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentGroup"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{id}",
        "description": "Delete the given assignment.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete an assignment",
            "notes": "Delete the given assignment.",
            "nickname": "delete_assignment",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Assignment"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments",
        "description": "Returns the paginated list of assignments for the current course or assignment group.",
        "operations": [
          {
            "method": "GET",
            "summary": "List assignments",
            "notes": "Returns the paginated list of assignments for the current course or assignment group.",
            "nickname": "list_assignments_assignments",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "submission",
                  "assignment_visibility",
                  "all_dates",
                  "overrides",
                  "observed_users",
                  "can_edit",
                  "score_statistics"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "search_term",
                "description": "The partial title of the assignments to match and return.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "override_assignment_dates",
                "description": "Apply assignment overrides for each assignment, defaults to true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "needs_grading_count_by_section",
                "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "bucket",
                "description": "If included, only return certain assignments depending on due date and submission status.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "past",
                  "overdue",
                  "undated",
                  "ungraded",
                  "unsubmitted",
                  "upcoming",
                  "future"
                ]
              },
              {
                "paramType": "query",
                "name": "assignment_ids",
                "description": "if set, return only assignments specified",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "order_by",
                "description": "Determines the order of the assignments. Defaults to \"position\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "position",
                  "name",
                  "due_at"
                ]
              },
              {
                "paramType": "query",
                "name": "post_to_sis",
                "description": "Return only assignments that have post_to_sis set or not set.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Assignment"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments",
        "description": "Returns the paginated list of assignments for the current course or assignment group.",
        "operations": [
          {
            "method": "GET",
            "summary": "List assignments",
            "notes": "Returns the paginated list of assignments for the current course or assignment group.",
            "nickname": "list_assignments_assignment_groups",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Optional information to include with each assignment:\nsubmission:: The current user's current +Submission+\nassignment_visibility:: An array of ids of students who can see the assignment\nall_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date\noverrides:: An array of +AssignmentOverride+ structures\nobserved_users:: An array of submissions for observed users\ncan_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment.\nscore_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "submission",
                  "assignment_visibility",
                  "all_dates",
                  "overrides",
                  "observed_users",
                  "can_edit",
                  "score_statistics"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "search_term",
                "description": "The partial title of the assignments to match and return.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "override_assignment_dates",
                "description": "Apply assignment overrides for each assignment, defaults to true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "needs_grading_count_by_section",
                "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "bucket",
                "description": "If included, only return certain assignments depending on due date and submission status.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "past",
                  "overdue",
                  "undated",
                  "ungraded",
                  "unsubmitted",
                  "upcoming",
                  "future"
                ]
              },
              {
                "paramType": "query",
                "name": "assignment_ids",
                "description": "if set, return only assignments specified",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "order_by",
                "description": "Determines the order of the assignments. Defaults to \"position\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "position",
                  "name",
                  "due_at"
                ]
              },
              {
                "paramType": "query",
                "name": "post_to_sis",
                "description": "Return only assignments that have post_to_sis set or not set.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Assignment"
            }
          }
        ]
      },
      {
        "path": "/v1/users/{user_id}/courses/{course_id}/assignments",
        "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
        "operations": [
          {
            "method": "GET",
            "summary": "List assignments for user",
            "notes": "Returns the paginated list of assignments for the specified user if the current user has rights to view.\nSee {api:AssignmentsApiController#index List assignments} for valid arguments.",
            "nickname": "list_assignments_for_user",
            "parameters": [
              {
                "paramType": "path",
                "name": "user_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/duplicate",
        "description": "Duplicate an assignment and return a json based on result_type argument.",
        "operations": [
          {
            "method": "POST",
            "summary": "Duplicate assignnment",
            "notes": "Duplicate an assignment and return a json based on result_type argument.",
            "nickname": "duplicate_assignnment",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "result_type",
                "description": "Optional information:\nWhen the root account has the feature `newquizzes_on_quiz_page` enabled\nand this argument is set to \"Quiz\" the response will be serialized into a\nquiz format({file:doc/api/quizzes.html#Quiz});\nWhen this argument isn't specified the response will be serialized into an\nassignment format;",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "Quiz"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Assignment"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{id}",
        "description": "Returns the assignment with the given id.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get a single assignment",
            "notes": "Returns the assignment with the given id.",
            "nickname": "get_single_assignment",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included.\nFor \"score_statistics\" to be included, the \"submission\" option must also be set.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "submission",
                  "assignment_visibility",
                  "overrides",
                  "observed_users",
                  "can_edit",
                  "score_statistics"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "override_assignment_dates",
                "description": "Apply assignment overrides to the assignment, defaults to true.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "needs_grading_count_by_section",
                "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "all_dates",
                "description": "All dates associated with the assignment, if applicable",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Assignment"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments",
        "description": "Create a new assignment for this course. The assignment is created in the\nactive state.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an assignment",
            "notes": "Create a new assignment for this course. The assignment is created in the\nactive state.",
            "nickname": "create_assignment",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[name]",
                "description": "The assignment name.",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[position]",
                "description": "The position of this assignment in the group when displaying\nassignment lists.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[submission_types]",
                "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "online_quiz",
                  "none",
                  "on_paper",
                  "discussion_topic",
                  "external_tool",
                  "online_upload",
                  "online_text_entry",
                  "online_url",
                  "media_recording",
                  "student_annotation"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[allowed_extensions]",
                "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[turnitin_enabled]",
                "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[vericite_enabled]",
                "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[turnitin_settings]",
                "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[integration_data]",
                "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[integration_id]",
                "description": "Unique ID from third party integrations",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[peer_reviews]",
                "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[automatic_peer_reviews]",
                "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[notify_of_update]",
                "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[group_category_id]",
                "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grade_group_students_individually]",
                "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[external_tool_tag_attributes]",
                "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[points_possible]",
                "description": "The maximum points possible on the assignment.",
                "type": "number",
                "format": "float",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grading_type]",
                "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "pass_fail",
                  "percent",
                  "letter_grade",
                  "gpa_scale",
                  "points",
                  "not_graded"
                ]
              },
              {
                "paramType": "form",
                "name": "assignment[due_at]",
                "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[lock_at]",
                "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[unlock_at]",
                "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[description]",
                "description": "The assignment's description, supports HTML.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[assignment_group_id]",
                "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[assignment_overrides]",
                "description": "List of overrides for the assignment.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "$ref": "AssignmentOverride"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[only_visible_to_overrides]",
                "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[published]",
                "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grading_standard_id]",
                "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[omit_from_final_grade]",
                "description": "Whether this assignment is counted towards a student's final grade.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[quiz_lti]",
                "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[moderated_grading]",
                "description": "Whether this assignment is moderated.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grader_count]",
                "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[final_grader_id]",
                "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grader_comments_visible_to_graders]",
                "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[graders_anonymous_to_graders]",
                "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[graders_names_visible_to_final_grader]",
                "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[anonymous_grading]",
                "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[allowed_attempts]",
                "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[annotatable_attachment_id]",
                "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Assignment"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{id}",
        "description": "Modify an existing assignment.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Edit an assignment",
            "notes": "Modify an existing assignment.",
            "nickname": "edit_assignment",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[name]",
                "description": "The assignment name.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[position]",
                "description": "The position of this assignment in the group when displaying\nassignment lists.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[submission_types]",
                "description": "Only applies if the assignment doesn't have student submissions.\n\nList of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)\n  \"student_annotation\"",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "online_quiz",
                  "none",
                  "on_paper",
                  "discussion_topic",
                  "external_tool",
                  "online_upload",
                  "online_text_entry",
                  "online_url",
                  "media_recording",
                  "student_annotation"
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[allowed_extensions]",
                "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[turnitin_enabled]",
                "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[vericite_enabled]",
                "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[turnitin_settings]",
                "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[sis_assignment_id]",
                "description": "The sis id of the Assignment",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[integration_data]",
                "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[integration_id]",
                "description": "Unique ID from third party integrations",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[peer_reviews]",
                "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[automatic_peer_reviews]",
                "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[notify_of_update]",
                "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[group_category_id]",
                "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grade_group_students_individually]",
                "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[external_tool_tag_attributes]",
                "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[points_possible]",
                "description": "The maximum points possible on the assignment.",
                "type": "number",
                "format": "float",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grading_type]",
                "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "pass_fail",
                  "percent",
                  "letter_grade",
                  "gpa_scale",
                  "points",
                  "not_graded"
                ]
              },
              {
                "paramType": "form",
                "name": "assignment[due_at]",
                "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[lock_at]",
                "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[unlock_at]",
                "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[description]",
                "description": "The assignment's description, supports HTML.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[assignment_group_id]",
                "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[assignment_overrides]",
                "description": "List of overrides for the assignment.\nIf the +assignment[assignment_overrides]+ key is absent, any existing\noverrides are kept as is. If the +assignment[assignment_overrides]+ key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "$ref": "AssignmentOverride"
                }
              },
              {
                "paramType": "form",
                "name": "assignment[only_visible_to_overrides]",
                "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[published]",
                "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grading_standard_id]",
                "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[omit_from_final_grade]",
                "description": "Whether this assignment is counted towards a student's final grade.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[moderated_grading]",
                "description": "Whether this assignment is moderated.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grader_count]",
                "description": "The maximum number of provisional graders who may issue grades for this\nassignment. Only relevant for moderated assignments. Must be a positive\nvalue, and must be set to 1 if the course has fewer than two active\ninstructors. Otherwise, the maximum value is the number of active\ninstructors in the course minus one, or 10 if the course has more than 11\nactive instructors.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[final_grader_id]",
                "description": "The user ID of the grader responsible for choosing final grades for this\nassignment. Only relevant for moderated assignments.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[grader_comments_visible_to_graders]",
                "description": "Boolean indicating if provisional graders' comments are visible to other\nprovisional graders. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[graders_anonymous_to_graders]",
                "description": "Boolean indicating if provisional graders' identities are hidden from\nother provisional graders. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[graders_names_visible_to_final_grader]",
                "description": "Boolean indicating if provisional grader identities are visible to the\nthe final grader. Only relevant for moderated assignments.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[anonymous_grading]",
                "description": "Boolean indicating if the assignment is graded anonymously. If true,\ngraders cannot see student identities.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[allowed_attempts]",
                "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for\nunlimited attempts.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[annotatable_attachment_id]",
                "description": "The Attachment ID of the document being annotated.\n\nOnly applies when submission_types includes \"student_annotation\".",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment[submission_types]",
                "description": "Only applies if the assignment doesn't have student submissions.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": true,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Assignment"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/bulk_update",
        "description": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Bulk update assignment dates",
            "notes": "Update due dates and availability dates for multiple assignments in a course.\n\nAccepts a JSON array of objects containing two keys each: +id+, the assignment id,\nand +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override\ndates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments}\nendpoint with +include[]=all_dates+.\n\nThis endpoint cannot create or destroy assignment overrides; any existing assignment overrides\nthat are not referenced in the arguments will be left alone. If an override is given, any dates\nthat are not supplied with it will be defaulted. To clear a date, specify null explicitly.\n\nAll referenced assignments will be validated before any are saved. A list of errors will\nbe returned if any provided dates are invalid, and no changes will be saved.\n\nThe bulk update is performed in a background job, use the {api:ProgressController#show Progress API}\nto check its status.",
            "nickname": "bulk_update_assignment_dates",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "Progress"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
        "description": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
        "operations": [
          {
            "method": "GET",
            "summary": "List assignment overrides",
            "notes": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
            "nickname": "list_assignment_overrides",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AssignmentOverride"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
        "description": "Returns details of the the override with the given id.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get a single assignment override",
            "notes": "Returns details of the the override with the given id.",
            "nickname": "get_single_assignment_override",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentOverride"
          }
        ]
      },
      {
        "path": "/v1/groups/{group_id}/assignments/{assignment_id}/override",
        "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
        "operations": [
          {
            "method": "GET",
            "summary": "Redirect to the assignment override for a group",
            "notes": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
            "nickname": "redirect_to_assignment_override_for_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "group_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/sections/{course_section_id}/assignments/{assignment_id}/override",
        "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
        "operations": [
          {
            "method": "GET",
            "summary": "Redirect to the assignment override for a section",
            "notes": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
            "nickname": "redirect_to_assignment_override_for_section",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_section_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
        "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an assignment override",
            "notes": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
            "nickname": "create_assignment_override",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[student_ids]",
                "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override.",
                "type": "array",
                "format": "int64",
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              },
              {
                "paramType": "form",
                "name": "assignment_override[title]",
                "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead).",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[group_id]",
                "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[course_section_id]",
                "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[due_at]",
                "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[unlock_at]",
                "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[lock_at]",
                "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentOverride"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
        "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Update an assignment override",
            "notes": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
            "nickname": "update_assignment_override",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[student_ids]",
                "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc.",
                "type": "array",
                "format": "int64",
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "integer"
                }
              },
              {
                "paramType": "form",
                "name": "assignment_override[title]",
                "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[due_at]",
                "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[unlock_at]",
                "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_override[lock_at]",
                "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentOverride"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
        "description": "Deletes an override and returns its former details.",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete an assignment override",
            "notes": "Deletes an override and returns its former details.",
            "nickname": "delete_assignment_override",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "assignment_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AssignmentOverride"
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/overrides",
        "description": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
        "operations": [
          {
            "method": "GET",
            "summary": "Batch retrieve overrides in a course",
            "notes": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
            "nickname": "batch_retrieve_overrides_in_course",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "assignment_overrides[id]",
                "description": "Ids of overrides to retrieve",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "assignment_overrides[assignment_id]",
                "description": "Ids of assignments for each override",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AssignmentOverride"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/overrides",
        "description": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
        "operations": [
          {
            "method": "POST",
            "summary": "Batch create overrides in a course",
            "notes": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "nickname": "batch_create_overrides_in_course",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_overrides",
                "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "$ref": "AssignmentOverride"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AssignmentOverride"
            }
          }
        ]
      },
      {
        "path": "/v1/courses/{course_id}/assignments/overrides",
        "description": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
        "operations": [
          {
            "method": "PUT",
            "summary": "Batch update overrides in a course",
            "notes": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
            "nickname": "batch_update_overrides_in_course",
            "parameters": [
              {
                "paramType": "path",
                "name": "course_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "assignment_overrides",
                "description": "Attributes for the updated overrides.",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "$ref": "AssignmentOverride"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AssignmentOverride"
            }
          }
        ]
      },
      {
        "path": "/v1/announcements",
        "description": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
        "operations": [
          {
            "method": "GET",
            "summary": "List announcements",
            "notes": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
            "nickname": "list_announcements",
            "parameters": [
              {
                "paramType": "query",
                "name": "context_codes",
                "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses.",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "start_date",
                "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                "type": "Date",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "end_date",
                "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators.",
                "type": "Date",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "active_only",
                "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "latest_only",
                "description": "Only return the latest announcement for each associated context.\nThe response will include at most one announcement for each\nspecified context in the context_codes[] parameter.\nDefaults to false.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "DiscussionTopic"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/scopes",
        "description": "A list of scopes that can be applied to developer keys and access tokens.",
        "operations": [
          {
            "method": "GET",
            "summary": "List scopes",
            "notes": "A list of scopes that can be applied to developer keys and access tokens.",
            "nickname": "list_scopes",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "group_by",
                "description": "The attribute to group the scopes by. By default no grouping is done.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "resource_name"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "Scope"
            }
          }
        ]
      },
      {
        "path": "/v1/appointment_groups",
        "description": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
        "operations": [
          {
            "method": "GET",
            "summary": "List appointment groups",
            "notes": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
            "nickname": "list_appointment_groups",
            "parameters": [
              {
                "paramType": "query",
                "name": "scope",
                "description": "Defaults to \"reservable\"",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "reservable",
                  "manageable"
                ]
              },
              {
                "paramType": "query",
                "name": "context_codes",
                "description": "Array of context codes used to limit returned results.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "query",
                "name": "include_past_appointments",
                "description": "Defaults to false. If true, includes past appointment groups",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "appointments",
                  "child_events",
                  "participant_count",
                  "reserved_times",
                  "all_context_codes"
                ],
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups",
        "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
        "operations": [
          {
            "method": "POST",
            "summary": "Create an appointment group",
            "notes": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
            "nickname": "create_appointment_group",
            "parameters": [
              {
                "paramType": "form",
                "name": "appointment_group[context_codes]",
                "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[sub_context_codes]",
                "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[title]",
                "description": "Short title for the appointment group.",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[description]",
                "description": "Longer text description of the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[location_name]",
                "description": "Location name of the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[location_address]",
                "description": "Location address.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[publish]",
                "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[participants_per_appointment]",
                "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[min_appointments_per_participant]",
                "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[max_appointments_per_participant]",
                "description": "Maximum number of time slots a user may register for.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[new_appointments][X]",
                "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[participant_visibility]",
                "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "private",
                  "protected"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/{id}",
        "description": "Returns information for a single appointment group",
        "operations": [
          {
            "method": "GET",
            "summary": "Get a single appointment group",
            "notes": "Returns information for a single appointment group",
            "nickname": "get_single_appointment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "include",
                "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "child_events",
                  "appointments",
                  "all_context_codes"
                ],
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/{id}",
        "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
        "operations": [
          {
            "method": "PUT",
            "summary": "Update an appointment group",
            "notes": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
            "nickname": "update_appointment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[context_codes]",
                "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                "type": "array",
                "format": null,
                "required": true,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[sub_context_codes]",
                "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[title]",
                "description": "Short title for the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[description]",
                "description": "Longer text description of the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[location_name]",
                "description": "Location name of the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[location_address]",
                "description": "Location address.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[publish]",
                "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                "type": "boolean",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[participants_per_appointment]",
                "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[min_appointments_per_participant]",
                "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[max_appointments_per_participant]",
                "description": "Maximum number of time slots a user may register for.",
                "type": "integer",
                "format": "int64",
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "form",
                "name": "appointment_group[new_appointments][X]",
                "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              },
              {
                "paramType": "form",
                "name": "appointment_group[participant_visibility]",
                "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\".",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "private",
                  "protected"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/{id}",
        "description": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete an appointment group",
            "notes": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
            "nickname": "delete_appointment_group",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "cancel_reason",
                "description": "Reason for deleting/canceling the appointment group.",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/{id}/users",
        "description": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
        "operations": [
          {
            "method": "GET",
            "summary": "List user participants",
            "notes": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
            "nickname": "list_user_participants",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "registration_status",
                "description": "Limits results to the a given participation status, defaults to \"all\"",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "all",
                  "registered",
                  "registered"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/{id}/groups",
        "description": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
        "operations": [
          {
            "method": "GET",
            "summary": "List student group participants",
            "notes": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
            "nickname": "list_student_group_participants",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "registration_status",
                "description": "Limits results to the a given participation status, defaults to \"all\"",
                "type": "string",
                "format": null,
                "required": false,
                "deprecated": false,
                "enum": [
                  "all",
                  "registered",
                  "registered"
                ]
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/appointment_groups/next_appointment",
        "description": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
        "operations": [
          {
            "method": "GET",
            "summary": "Get next appointment",
            "notes": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
            "nickname": "get_next_appointment",
            "parameters": [
              {
                "paramType": "query",
                "name": "appointment_group_ids",
                "description": "List of ids of appointment groups to search.",
                "type": "array",
                "format": null,
                "required": false,
                "deprecated": false,
                "items": {
                  "type": "string"
                }
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "CalendarEvent"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/authentication_providers",
        "description": "Returns a paginated list of authentication providers",
        "operations": [
          {
            "method": "GET",
            "summary": "List authentication providers",
            "notes": "Returns a paginated list of authentication providers",
            "nickname": "list_authentication_providers",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "array",
            "items": {
              "$ref": "AuthenticationProvider"
            }
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/authentication_providers",
        "description": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
        "operations": [
          {
            "method": "POST",
            "summary": "Add authentication provider",
            "notes": "Add external authentication provider(s) for the account.\nServices may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook',\n'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect',\n'saml', or 'twitter'. The other recognized parameters depend on this\nauth_type; unrecognized parameters are discarded. Provider specifications\nnot specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any provider. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any provider\nbesides Canvas. You can set 'mfa_required' for any provider.\n\nFor Apple, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The developer’s client identifier, as provided by WWDR. Not available if\n  configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'firstName', 'lastName', and 'sub'.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
            "nickname": "add_authentication_provider",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AuthenticationProvider"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
        "description": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
        "operations": [
          {
            "method": "PUT",
            "summary": "Update authentication provider",
            "notes": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
            "nickname": "update_authentication_provider",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AuthenticationProvider"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
        "description": "Get the specified authentication provider",
        "operations": [
          {
            "method": "GET",
            "summary": "Get authentication provider",
            "notes": "Get the specified authentication provider",
            "nickname": "get_authentication_provider",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "AuthenticationProvider"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/authentication_providers/{id}",
        "description": "Delete the config",
        "operations": [
          {
            "method": "DELETE",
            "summary": "Delete authentication provider",
            "notes": "Delete the config",
            "nickname": "delete_authentication_provider",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "path",
                "name": "id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/sso_settings",
        "description": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
        "operations": [
          {
            "method": "GET",
            "summary": "show account auth settings",
            "notes": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
            "nickname": "show_account_auth_settings",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "SSOSettings"
          }
        ]
      },
      {
        "path": "/v1/accounts/{account_id}/sso_settings",
        "description": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
        "operations": [
          {
            "method": "PUT",
            "summary": "update account auth settings",
            "notes": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
            "nickname": "update_account_auth_settings",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "SSOSettings"
          }
        ]
      },
      {
        "path": "/v1/audit/authentication/logins/{login_id}",
        "description": "List authentication events for a given login.",
        "operations": [
          {
            "method": "GET",
            "summary": "Query by login.",
            "notes": "List authentication events for a given login.",
            "nickname": "query_by_login",
            "parameters": [
              {
                "paramType": "path",
                "name": "login_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "start_time",
                "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "end_time",
                "description": "The end of the time range from which you want events.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/audit/authentication/accounts/{account_id}",
        "description": "List authentication events for a given account.",
        "operations": [
          {
            "method": "GET",
            "summary": "Query by account.",
            "notes": "List authentication events for a given account.",
            "nickname": "query_by_account",
            "parameters": [
              {
                "paramType": "path",
                "name": "account_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "start_time",
                "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "end_time",
                "description": "The end of the time range from which you want events.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      },
      {
        "path": "/v1/audit/authentication/users/{user_id}",
        "description": "List authentication events for a given user.",
        "operations": [
          {
            "method": "GET",
            "summary": "Query by user.",
            "notes": "List authentication events for a given user.",
            "nickname": "query_by_user",
            "parameters": [
              {
                "paramType": "path",
                "name": "user_id",
                "description": "ID",
                "type": "string",
                "format": null,
                "required": true,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "start_time",
                "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              },
              {
                "paramType": "query",
                "name": "end_time",
                "description": "The end of the time range from which you want events.",
                "type": "DateTime",
                "format": null,
                "required": false,
                "deprecated": false
              }
            ],
            "response_fields": [],
            "deprecated": false,
            "deprecation_description": "",
            "type": "void"
          }
        ]
      }
    ],
    "models": {
      "AccountNotification": {
        "id": "AccountNotification",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "subject": {
            "description": "The subject of the notifications",
            "example": "Attention Students",
            "type": "string"
          },
          "message": {
            "description": "The message to be sent in the notification.",
            "example": "This is a test of the notification system.",
            "type": "string"
          },
          "start_at": {
            "description": "When to send out the notification.",
            "example": "2013-08-28T23:59:00-06:00",
            "type": "datetime"
          },
          "end_at": {
            "description": "When to expire the notification.",
            "example": "2013-08-29T23:59:00-06:00",
            "type": "datetime"
          },
          "icon": {
            "description": "The icon to display with the message.  Defaults to warning.",
            "example": "information",
            "type": "string",
            "allowableValues": {
              "values": [
                "warning",
                "information",
                "question",
                "error",
                "calendar"
              ]
            }
          },
          "roles": {
            "description": "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles",
            "example": [
              "StudentEnrollment"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "role_ids": {
            "description": "The roles to send the notification to.  If roles is not passed it defaults to all roles",
            "example": [
              1
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Report": {
        "id": "Report",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "The unique identifier for the report.",
            "example": "1",
            "type": "integer"
          },
          "report": {
            "description": "The type of report.",
            "example": "sis_export_csv",
            "type": "string"
          },
          "file_url": {
            "description": "The url to the report download.",
            "example": "https://example.com/some/path",
            "type": "string"
          },
          "attachment": {
            "description": "The attachment api object of the report. Only available after the report has completed.",
            "$ref": "File"
          },
          "status": {
            "description": "The status of the report",
            "example": "complete",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time the report was created.",
            "example": "2013-12-01T23:59:00-06:00",
            "type": "datetime"
          },
          "started_at": {
            "description": "The date and time the report started processing.",
            "example": "2013-12-02T00:03:21-06:00",
            "type": "datetime"
          },
          "ended_at": {
            "description": "The date and time the report finished processing.",
            "example": "2013-12-02T00:03:21-06:00",
            "type": "datetime"
          },
          "parameters": {
            "description": "The report parameters",
            "example": {
              "course_id": 2,
              "start_at": "2012-07-13T10:55:20-06:00",
              "end_at": "2012-07-13T10:55:20-06:00"
            },
            "$ref": "ReportParameters"
          },
          "progress": {
            "description": "The progress of the report",
            "example": "100",
            "type": "integer"
          },
          "current_line": {
            "description": "This is the current line count being written to the report. It updates every 1000 records.",
            "example": "12000",
            "type": "integer"
          }
        }
      },
      "ReportParameters": {
        "id": "ReportParameters",
        "description": "The parameters returned will vary for each report.",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "enrollment_term_id": {
            "description": "The canvas id of the term to get grades from",
            "example": 2,
            "type": "integer"
          },
          "include_deleted": {
            "description": "If true, deleted objects will be included. If false, deleted objects will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "course_id": {
            "description": "The id of the course to report on",
            "example": 2,
            "type": "integer"
          },
          "order": {
            "description": "The sort order for the csv, Options: 'users', 'courses', 'outcomes'.",
            "example": "users",
            "type": "string",
            "allowableValues": {
              "values": [
                "users",
                "courses",
                "outcomes"
              ]
            }
          },
          "users": {
            "description": "If true, user data will be included. If false, user data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "accounts": {
            "description": "If true, account data will be included. If false, account data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "terms": {
            "description": "If true, term data will be included. If false, term data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "courses": {
            "description": "If true, course data will be included. If false, course data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "sections": {
            "description": "If true, section data will be included. If false, section data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "enrollments": {
            "description": "If true, enrollment data will be included. If false, enrollment data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "groups": {
            "description": "If true, group data will be included. If false, group data will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "xlist": {
            "description": "If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.",
            "example": false,
            "type": "boolean"
          },
          "sis_terms_csv": {
            "example": 1,
            "type": "integer"
          },
          "sis_accounts_csv": {
            "example": 1,
            "type": "integer"
          },
          "include_enrollment_state": {
            "description": "If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.",
            "example": false,
            "type": "boolean"
          },
          "enrollment_state": {
            "description": "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']",
            "example": [
              "all"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "start_at": {
            "description": "The beginning date for submissions. Max time range is 2 weeks.",
            "example": "2012-07-13T10:55:20-06:00",
            "type": "datetime"
          },
          "end_at": {
            "description": "The end date for submissions. Max time range is 2 weeks.",
            "example": "2012-07-13T10:55:20-06:00",
            "type": "datetime"
          }
        }
      },
      "Account": {
        "id": "Account",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "the ID of the Account object",
            "example": 2,
            "type": "integer"
          },
          "name": {
            "description": "The display name of the account",
            "example": "Canvas Account",
            "type": "string"
          },
          "uuid": {
            "description": "The UUID of the account",
            "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
            "type": "string"
          },
          "parent_account_id": {
            "description": "The account's parent ID, or null if this is the root account",
            "example": 1,
            "type": "integer"
          },
          "root_account_id": {
            "description": "The ID of the root account, or null if this is the root account",
            "example": 1,
            "type": "integer"
          },
          "default_storage_quota_mb": {
            "description": "The storage quota for the account in megabytes, if not otherwise specified",
            "example": 500,
            "type": "integer"
          },
          "default_user_storage_quota_mb": {
            "description": "The storage quota for a user in the account in megabytes, if not otherwise specified",
            "example": 50,
            "type": "integer"
          },
          "default_group_storage_quota_mb": {
            "description": "The storage quota for a group in the account in megabytes, if not otherwise specified",
            "example": 50,
            "type": "integer"
          },
          "default_time_zone": {
            "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
            "example": "America/Denver",
            "type": "string"
          },
          "sis_account_id": {
            "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
            "example": "123xyz",
            "type": "string"
          },
          "integration_id": {
            "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
            "example": "123xyz",
            "type": "string"
          },
          "sis_import_id": {
            "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
            "example": "12",
            "type": "integer"
          },
          "lti_guid": {
            "description": "The account's identifier that is sent as context_id in LTI launches.",
            "example": "123xyz",
            "type": "string"
          },
          "workflow_state": {
            "description": "The state of the account. Can be 'active' or 'deleted'.",
            "example": "active",
            "type": "string"
          }
        }
      },
      "TermsOfService": {
        "id": "TermsOfService",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "Terms Of Service id",
            "example": 1,
            "type": "integer"
          },
          "terms_type": {
            "description": "The given type for the Terms of Service",
            "enum": [
              "default",
              "custom",
              "no_terms"
            ],
            "example": "default",
            "type": "string"
          },
          "passive": {
            "description": "Boolean dictating if the user must accept Terms of Service",
            "example": false,
            "type": "boolean"
          },
          "account_id": {
            "description": "The id of the root account that owns the Terms of Service",
            "example": 1,
            "type": "integer"
          },
          "content": {
            "description": "Content of the Terms of Service",
            "example": "To be or not to be that is the question",
            "type": "string"
          },
          "self_registration_type": {
            "description": "The type of self registration allowed",
            "example": [
              "none",
              "observer",
              "all"
            ],
            "type": "string"
          }
        }
      },
      "HelpLink": {
        "id": "HelpLink",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {}
      },
      "HelpLinks": {
        "id": "HelpLinks",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "help_link_name": {
            "description": "Help link button title",
            "example": "Help And Policies",
            "type": "string"
          },
          "help_link_icon": {
            "description": "Help link button icon",
            "example": "help",
            "type": "string"
          },
          "custom_help_links": {
            "description": "Help links defined by the account. Could include default help links.",
            "type": "array",
            "items": {
              "$ref": "HelpLink"
            },
            "example": [
              {
                "id": "link1",
                "text": "Custom Link!",
                "subtext": "Something something.",
                "url": "https://google.com",
                "type": "custom",
                "available_to": [
                  "user",
                  "student",
                  "teacher",
                  "admin",
                  "observer",
                  "unenrolled"
                ],
                "is_featured": true,
                "is_new": false,
                "feature_headline": "Check this out!"
              }
            ]
          },
          "default_help_links": {
            "description": "Default help links provided when account has not set help links of their own.",
            "type": "array",
            "items": {
              "$ref": "HelpLink"
            },
            "example": [
              {
                "available_to": [
                  "student"
                ],
                "text": "Ask Your Instructor a Question",
                "subtext": "Questions are submitted to your instructor",
                "url": "#teacher_feedback",
                "type": "default",
                "id": "instructor_question",
                "is_featured": false,
                "is_new": true,
                "feature_headline": ""
              },
              {
                "available_to": [
                  "user",
                  "student",
                  "teacher",
                  "admin",
                  "observer",
                  "unenrolled"
                ],
                "text": "Search the Canvas Guides",
                "subtext": "Find answers to common questions",
                "url": "https://community.canvaslms.com/t5/Guides/ct-p/guides",
                "type": "default",
                "id": "search_the_canvas_guides",
                "is_featured": false,
                "is_new": false,
                "feature_headline": ""
              },
              {
                "available_to": [
                  "user",
                  "student",
                  "teacher",
                  "admin",
                  "observer",
                  "unenrolled"
                ],
                "text": "Report a Problem",
                "subtext": "If Canvas misbehaves, tell us about it",
                "url": "#create_ticket",
                "type": "default",
                "id": "report_a_problem",
                "is_featured": false,
                "is_new": false,
                "feature_headline": ""
              }
            ]
          }
        }
      },
      "Admin": {
        "id": "Admin",
        "description": "",
        "required": [
          "id"
        ],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "The unique identifier for the account role/user assignment.",
            "example": 1023,
            "type": "integer"
          },
          "role": {
            "description": "The account role assigned. This can be 'AccountAdmin' or a user-defined role created by the Roles API.",
            "example": "AccountAdmin",
            "type": "string"
          },
          "user": {
            "description": "The user the role is assigned to. See the Users API for details.",
            "$ref": "User"
          },
          "workflow_state": {
            "description": "The status of the account role/user assignment.",
            "type": "string",
            "example": "deleted"
          }
        }
      },
      "ExternalFeed": {
        "id": "ExternalFeed",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "The ID of the feed",
            "example": 5,
            "type": "integer"
          },
          "display_name": {
            "description": "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL",
            "example": "My Blog",
            "type": "string"
          },
          "url": {
            "description": "The HTTP/HTTPS URL to the feed",
            "example": "http://example.com/myblog.rss",
            "type": "string"
          },
          "header_match": {
            "description": "If not null, only feed entries whose title contains this string will trigger new posts in Canvas",
            "example": "pattern",
            "type": "string"
          },
          "created_at": {
            "description": "When this external feed was added to Canvas",
            "example": "2012-06-01T00:00:00-06:00",
            "type": "datetime"
          },
          "verbosity": {
            "description": "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.",
            "example": "truncate",
            "type": "string",
            "allowableValues": {
              "values": [
                "link_only",
                "truncate",
                "full"
              ]
            }
          }
        }
      },
      "AssignmentExtension": {
        "id": "AssignmentExtension",
        "description": "",
        "required": [
          "assignment_id",
          "user_id"
        ],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "assignment_id": {
            "description": "The ID of the Assignment the extension belongs to.",
            "example": 2,
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "description": "The ID of the Student that needs the assignment extension.",
            "example": 3,
            "type": "integer",
            "format": "int64"
          },
          "extra_attempts": {
            "description": "Number of times the student is allowed to re-submit the assignment",
            "example": 2,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GradingRules": {
        "id": "GradingRules",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "drop_lowest": {
            "description": "Number of lowest scores to be dropped for each user.",
            "example": 1,
            "type": "integer"
          },
          "drop_highest": {
            "description": "Number of highest scores to be dropped for each user.",
            "example": 1,
            "type": "integer"
          },
          "never_drop": {
            "description": "Assignment IDs that should never be dropped.",
            "example": [
              33,
              17,
              24
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AssignmentGroup": {
        "id": "AssignmentGroup",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "the id of the Assignment Group",
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "the name of the Assignment Group",
            "example": "group2",
            "type": "string"
          },
          "position": {
            "description": "the position of the Assignment Group",
            "example": 7,
            "type": "integer"
          },
          "group_weight": {
            "description": "the weight of the Assignment Group",
            "example": 20,
            "type": "integer"
          },
          "sis_source_id": {
            "description": "the sis source id of the Assignment Group",
            "example": "1234",
            "type": "string"
          },
          "integration_data": {
            "description": "the integration data of the Assignment Group",
            "example": {
              "5678": "0954"
            },
            "type": "object"
          },
          "assignments": {
            "description": "the assignments in this Assignment Group (see the Assignment API for a detailed list of fields)",
            "example": [],
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "rules": {
            "description": "the grading rules that this Assignment Group has",
            "$ref": "GradingRules"
          }
        }
      },
      "ExternalToolTagAttributes": {
        "id": "ExternalToolTagAttributes",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "url": {
            "description": "URL to the external tool",
            "example": "http://instructure.com",
            "type": "string"
          },
          "new_tab": {
            "description": "Whether or not there is a new tab for the external tool",
            "example": false,
            "type": "boolean"
          },
          "resource_link_id": {
            "description": "the identifier for this tool_tag",
            "example": "ab81173af98b8c33e66a",
            "type": "string"
          }
        }
      },
      "LockInfo": {
        "id": "LockInfo",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "asset_string": {
            "description": "Asset string for the object causing the lock",
            "example": "assignment_4",
            "type": "string"
          },
          "unlock_at": {
            "description": "(Optional) Time at which this was/will be unlocked. Must be before the due date.",
            "example": "2013-01-01T00:00:00-06:00",
            "type": "datetime"
          },
          "lock_at": {
            "description": "(Optional) Time at which this was/will be locked. Must be after the due date.",
            "example": "2013-02-01T00:00:00-06:00",
            "type": "datetime"
          },
          "context_module": {
            "description": "(Optional) Context module causing the lock.",
            "example": "{}",
            "type": "string"
          },
          "manually_locked": {
            "example": true,
            "type": "boolean"
          }
        }
      },
      "RubricRating": {
        "id": "RubricRating",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "points": {
            "example": 10,
            "type": "integer"
          },
          "id": {
            "example": "rat1",
            "type": "string"
          },
          "description": {
            "example": "Full marks",
            "type": "string"
          },
          "long_description": {
            "example": "Student completed the assignment flawlessly.",
            "type": "string"
          }
        }
      },
      "RubricCriteria": {
        "id": "RubricCriteria",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "points": {
            "example": 10,
            "type": "integer"
          },
          "id": {
            "description": "The id of rubric criteria.",
            "example": "crit1",
            "type": "string"
          },
          "learning_outcome_id": {
            "description": "(Optional) The id of the learning outcome this criteria uses, if any.",
            "example": "1234",
            "type": "string"
          },
          "vendor_guid": {
            "description": "(Optional) The 3rd party vendor's GUID for the outcome this criteria references, if any.",
            "example": "abdsfjasdfne3jsdfn2",
            "type": "string"
          },
          "description": {
            "example": "Criterion 1",
            "type": "string"
          },
          "long_description": {
            "example": "Criterion 1 more details",
            "type": "string"
          },
          "criterion_use_range": {
            "example": true,
            "type": "boolean"
          },
          "ratings": {
            "type": "array",
            "items": {
              "$ref": "RubricRating"
            }
          },
          "ignore_for_scoring": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AssignmentDate": {
        "id": "AssignmentDate",
        "description": "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field.",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "example": 1,
            "type": "integer",
            "description": "(Optional, missing if 'base' is present) id of the assignment override this date represents"
          },
          "base": {
            "example": true,
            "type": "boolean",
            "description": "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date"
          },
          "title": {
            "example": "Summer Session",
            "type": "string"
          },
          "due_at": {
            "description": "The due date for the assignment. Must be between the unlock date and the lock date if there are lock dates",
            "example": "2013-08-28T23:59:00-06:00",
            "type": "datetime"
          },
          "unlock_at": {
            "description": "The unlock date for the assignment. Must be before the due date if there is a due date.",
            "example": "2013-08-01T00:00:00-06:00",
            "type": "datetime"
          },
          "lock_at": {
            "description": "The lock date for the assignment. Must be after the due date if there is a due date.",
            "example": "2013-08-31T23:59:00-06:00",
            "type": "datetime"
          }
        }
      },
      "TurnitinSettings": {
        "id": "TurnitinSettings",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "originality_report_visibility": {
            "example": "after_grading",
            "type": "string"
          },
          "s_paper_check": {
            "example": false,
            "type": "boolean"
          },
          "internet_check": {
            "example": false,
            "type": "boolean"
          },
          "journal_check": {
            "example": false,
            "type": "boolean"
          },
          "exclude_biblio": {
            "example": false,
            "type": "boolean"
          },
          "exclude_quoted": {
            "example": false,
            "type": "boolean"
          },
          "exclude_small_matches_type": {
            "example": "percent",
            "type": "string"
          },
          "exclude_small_matches_value": {
            "example": 50,
            "type": "integer"
          }
        }
      },
      "NeedsGradingCount": {
        "id": "NeedsGradingCount",
        "description": "Used by Assignment model",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "section_id": {
            "description": "The section ID",
            "example": "123456",
            "type": "string"
          },
          "needs_grading_count": {
            "description": "Number of submissions that need grading",
            "example": 5,
            "type": "integer"
          }
        }
      },
      "ScoreStatistic": {
        "id": "ScoreStatistic",
        "description": "Used by Assignment model",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "min": {
            "description": "Min score",
            "example": 1,
            "type": "integer"
          },
          "max": {
            "description": "Max score",
            "example": 10,
            "type": "integer"
          },
          "mean": {
            "description": "Mean score",
            "example": 6,
            "type": "integer"
          }
        }
      },
      "Assignment": {
        "id": "Assignment",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "the ID of the assignment",
            "example": 4,
            "type": "integer"
          },
          "name": {
            "description": "the name of the assignment",
            "example": "some assignment",
            "type": "string"
          },
          "description": {
            "description": "the assignment description, in an HTML fragment",
            "example": "<p>Do the following:</p>...",
            "type": "string"
          },
          "created_at": {
            "description": "The time at which this assignment was originally created",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "updated_at": {
            "description": "The time at which this assignment was last modified in any way",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "due_at": {
            "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "lock_at": {
            "description": "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "unlock_at": {
            "description": "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "has_overrides": {
            "description": "whether this assignment has overrides",
            "example": true,
            "type": "boolean"
          },
          "all_dates": {
            "description": "(Optional) all dates associated with the assignment, if applicable",
            "type": "array",
            "items": {
              "$ref": "AssignmentDate"
            }
          },
          "course_id": {
            "description": "the ID of the course the assignment belongs to",
            "example": 123,
            "type": "integer"
          },
          "html_url": {
            "description": "the URL to the assignment's web page",
            "example": "https://...",
            "type": "string"
          },
          "submissions_download_url": {
            "description": "the URL to download all submissions as a zip",
            "example": "https://example.com/courses/:course_id/assignments/:id/submissions?zip=1",
            "type": "string"
          },
          "assignment_group_id": {
            "description": "the ID of the assignment's group",
            "example": 2,
            "type": "integer"
          },
          "due_date_required": {
            "description": "Boolean flag indicating whether the assignment requires a due date based on the account level setting",
            "example": true,
            "type": "boolean"
          },
          "allowed_extensions": {
            "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.",
            "example": [
              "docx",
              "ppt"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "max_name_length": {
            "description": "An integer indicating the maximum length an assignment's name may be",
            "example": 15,
            "type": "integer"
          },
          "turnitin_enabled": {
            "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available",
            "example": true,
            "type": "boolean"
          },
          "vericite_enabled": {
            "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available",
            "example": true,
            "type": "boolean"
          },
          "turnitin_settings": {
            "description": "Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available",
            "$ref": "TurnitinSettings"
          },
          "grade_group_students_individually": {
            "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.",
            "example": false,
            "type": "boolean"
          },
          "external_tool_tag_attributes": {
            "description": "(Optional) assignment's settings for external tools if submission_types include 'external_tool'. Only url and new_tab are included (new_tab defaults to false).  Use the 'External Tools' API if you need more information about an external tool.",
            "$ref": "ExternalToolTagAttributes"
          },
          "peer_reviews": {
            "description": "Boolean indicating if peer reviews are required for this assignment",
            "example": false,
            "type": "boolean"
          },
          "automatic_peer_reviews": {
            "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.",
            "example": false,
            "type": "boolean"
          },
          "peer_review_count": {
            "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
            "example": 0,
            "type": "integer"
          },
          "peer_reviews_assign_at": {
            "description": "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "intra_group_peer_reviews": {
            "description": "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work",
            "example": "false",
            "type": "boolean"
          },
          "group_category_id": {
            "description": "The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.",
            "example": 1,
            "type": "integer"
          },
          "needs_grading_count": {
            "description": "if the requesting user has grading rights, the number of submissions that need grading.",
            "example": 17,
            "type": "integer"
          },
          "needs_grading_count_by_section": {
            "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)",
            "example": [
              {
                "section_id": "123456",
                "needs_grading_count": 5
              },
              {
                "section_id": "654321",
                "needs_grading_count": 0
              }
            ],
            "type": "array",
            "items": {
              "$ref": "NeedsGradingCount"
            }
          },
          "position": {
            "description": "the sorting order of the assignment in the group",
            "example": 1,
            "type": "integer"
          },
          "post_to_sis": {
            "example": true,
            "type": "boolean",
            "description": "(optional, present if Sync Grades to SIS feature is enabled)"
          },
          "integration_id": {
            "example": "12341234",
            "type": "string",
            "description": "(optional, Third Party unique identifier for Assignment)"
          },
          "integration_data": {
            "example": {
              "5678": "0954"
            },
            "type": "object",
            "description": "(optional, Third Party integration data for assignment)"
          },
          "points_possible": {
            "description": "the maximum points possible for the assignment",
            "example": 12,
            "type": "number"
          },
          "submission_types": {
            "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'",
            "example": [
              "online_text_entry"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "allowableValues": {
              "values": [
                "discussion_topic",
                "online_quiz",
                "on_paper",
                "not_graded",
                "none",
                "external_tool",
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording",
                "student_annotation"
              ]
            }
          },
          "has_submitted_submissions": {
            "description": "If true, the assignment has been submitted to by at least one student",
            "example": true,
            "type": "boolean"
          },
          "grading_type": {
            "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'",
            "example": "points",
            "type": "string",
            "allowableValues": {
              "values": [
                "pass_fail",
                "percent",
                "letter_grade",
                "gpa_scale",
                "points"
              ]
            }
          },
          "grading_standard_id": {
            "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.",
            "type": "integer"
          },
          "published": {
            "description": "Whether the assignment is published",
            "example": true,
            "type": "boolean"
          },
          "unpublishable": {
            "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.",
            "example": false,
            "type": "boolean"
          },
          "only_visible_to_overrides": {
            "description": "Whether the assignment is only visible to overrides.",
            "example": false,
            "type": "boolean"
          },
          "locked_for_user": {
            "description": "Whether or not this is locked for the user.",
            "example": false,
            "type": "boolean"
          },
          "lock_info": {
            "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.",
            "$ref": "LockInfo"
          },
          "lock_explanation": {
            "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
            "example": "This assignment is locked until September 1 at 12:00am",
            "type": "string"
          },
          "quiz_id": {
            "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])",
            "example": 620,
            "type": "integer"
          },
          "anonymous_submissions": {
            "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)",
            "example": false,
            "type": "boolean"
          },
          "discussion_topic": {
            "description": "(Optional) the DiscussionTopic associated with the assignment, if applicable",
            "$ref": "DiscussionTopic"
          },
          "freeze_on_copy": {
            "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
            "example": false,
            "type": "boolean"
          },
          "frozen": {
            "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
            "example": false,
            "type": "boolean"
          },
          "frozen_attributes": {
            "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
            "example": [
              "title"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "submission": {
            "description": "(Optional) If 'submission' is included in the 'include' parameter, includes a Submission object that represents the current user's (user who is requesting information from the api) current submission for the assignment. See the Submissions API for an example response. If the user does not have a submission, this key will be absent.",
            "$ref": "Submission"
          },
          "use_rubric_for_grading": {
            "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.",
            "example": true,
            "type": "boolean"
          },
          "rubric_settings": {
            "description": "(Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.",
            "example": "{\"points_possible\"=>12}",
            "type": "string"
          },
          "rubric": {
            "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.",
            "type": "array",
            "items": {
              "$ref": "RubricCriteria"
            }
          },
          "assignment_visibility": {
            "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.",
            "example": [
              137,
              381,
              572
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "overrides": {
            "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.",
            "type": "array",
            "items": {
              "$ref": "AssignmentOverride"
            }
          },
          "omit_from_final_grade": {
            "description": "(Optional) If true, the assignment will be omitted from the student's final grade",
            "example": true,
            "type": "boolean"
          },
          "moderated_grading": {
            "description": "Boolean indicating if the assignment is moderated.",
            "example": true,
            "type": "boolean"
          },
          "grader_count": {
            "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.",
            "example": 3,
            "type": "integer"
          },
          "final_grader_id": {
            "description": "The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.",
            "example": 3,
            "type": "integer"
          },
          "grader_comments_visible_to_graders": {
            "description": "Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.",
            "example": true,
            "type": "boolean"
          },
          "graders_anonymous_to_graders": {
            "description": "Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true.",
            "example": true,
            "type": "boolean"
          },
          "grader_names_visible_to_final_grader": {
            "description": "Boolean indicating if provisional grader identities are visible to the final grader. Only relevant for moderated assignments.",
            "example": true,
            "type": "boolean"
          },
          "anonymous_grading": {
            "description": "Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.",
            "example": true,
            "type": "boolean"
          },
          "allowed_attempts": {
            "description": "The number of submission attempts a student can make for this assignment. -1 is considered unlimited.",
            "example": 2,
            "type": "integer"
          },
          "post_manually": {
            "description": "Whether the assignment has manual posting enabled. Only relevant for courses using New Gradebook.",
            "example": true,
            "type": "boolean"
          },
          "score_statistics": {
            "description": "(Optional) If 'score_statistics' and 'submission' are included in the 'include' parameter and statistics are available, includes the min, max, and mode for this assignment",
            "$ref": "ScoreStatistic"
          },
          "can_submit": {
            "description": "(Optional) If retrieving a single assignment and 'can_submit' is included in the 'include' parameter, flags whether user has the right to submit the assignment (i.e. checks enrollment dates, submission types, locked status, attempts remaining, etc...). Including 'can submit' automatically includes 'submission' in the include parameter. Not available when observed_users are included.",
            "example": true,
            "type": "boolean"
          },
          "annotatable_attachment_id": {
            "description": "The id of the attachment to be annotated by students. Relevant only if submission_types includes 'student_annotation'.",
            "type": "integer"
          },
          "anonymize_students": {
            "description": "(Optional) Boolean indicating whether student names are anonymized",
            "example": false,
            "type": "boolean"
          },
          "require_lockdown_browser": {
            "description": "(Optional) Boolean indicating whether the Respondus LockDown Browser® is required for this assignment.",
            "example": false,
            "type": "boolean"
          },
          "important_dates": {
            "description": "(Optional) Boolean indicating whether this assignment has important dates.",
            "example": false,
            "type": "boolean"
          },
          "muted": {
            "description": "(Optional, Deprecated) Boolean indicating whether notifications are muted for this assignment.",
            "example": false,
            "type": "boolean"
          }
        }
      },
      "AssignmentOverride": {
        "id": "AssignmentOverride",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "the ID of the assignment override",
            "example": 4,
            "type": "integer"
          },
          "assignment_id": {
            "description": "the ID of the assignment the override applies to",
            "example": 123,
            "type": "integer"
          },
          "student_ids": {
            "description": "the IDs of the override's target students (present if the override targets an ad-hoc set of students)",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "group_id": {
            "description": "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)",
            "example": 2,
            "type": "integer"
          },
          "course_section_id": {
            "description": "the ID of the overrides's target section (present if the override targets a section)",
            "example": 1,
            "type": "integer"
          },
          "title": {
            "description": "the title of the override",
            "example": "an assignment override",
            "type": "string"
          },
          "due_at": {
            "description": "the overridden due at (present if due_at is overridden)",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "all_day": {
            "description": "the overridden all day flag (present if due_at is overridden)",
            "example": true,
            "type": "boolean"
          },
          "all_day_date": {
            "description": "the overridden all day date (present if due_at is overridden)",
            "example": "2012-07-01",
            "type": "datetime"
          },
          "unlock_at": {
            "description": "the overridden unlock at (present if unlock_at is overridden)",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          },
          "lock_at": {
            "description": "the overridden lock at, if any (present if lock_at is overridden)",
            "example": "2012-07-01T23:59:00-06:00",
            "type": "datetime"
          }
        }
      },
      "Scope": {
        "id": "Scope",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "resource": {
            "description": "The resource the scope is associated with",
            "example": "courses",
            "type": "string"
          },
          "resource_name": {
            "description": "The localized resource name",
            "example": "Courses",
            "type": "string"
          },
          "controller": {
            "description": "The controller the scope is associated to",
            "example": "courses",
            "type": "string"
          },
          "action": {
            "description": "The controller action the scope is associated to",
            "example": "index",
            "type": "string"
          },
          "verb": {
            "description": "The HTTP verb for the scope",
            "example": "GET",
            "type": "string"
          },
          "scope": {
            "description": "The identifier for the scope",
            "example": "url:GET|/api/v1/courses",
            "type": "string"
          }
        }
      },
      "Appointment": {
        "id": "Appointment",
        "description": "Date and time for an appointment",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "The appointment identifier.",
            "example": 987,
            "type": "integer"
          },
          "start_at": {
            "description": "Start time for the appointment",
            "example": "2012-07-20T15:00:00-06:00",
            "type": "datetime"
          },
          "end_at": {
            "description": "End time for the appointment",
            "example": "2012-07-20T15:00:00-06:00",
            "type": "datetime"
          }
        }
      },
      "AppointmentGroup": {
        "id": "AppointmentGroup",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "id": {
            "description": "The ID of the appointment group",
            "example": 543,
            "type": "integer"
          },
          "title": {
            "description": "The title of the appointment group",
            "example": "Final Presentation",
            "type": "string"
          },
          "start_at": {
            "description": "The start of the first time slot in the appointment group",
            "example": "2012-07-20T15:00:00-06:00",
            "type": "datetime"
          },
          "end_at": {
            "description": "The end of the last time slot in the appointment group",
            "example": "2012-07-20T17:00:00-06:00",
            "type": "datetime"
          },
          "description": {
            "description": "The text description of the appointment group",
            "example": "Es muy importante",
            "type": "string"
          },
          "location_name": {
            "description": "The location name of the appointment group",
            "example": "El Tigre Chino's office",
            "type": "string"
          },
          "location_address": {
            "description": "The address of the appointment group's location",
            "example": "Room 234",
            "type": "string"
          },
          "participant_count": {
            "description": "The number of participant who have reserved slots (see include[] argument)",
            "example": 2,
            "type": "integer"
          },
          "reserved_times": {
            "description": "The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)",
            "example": [
              {
                "id": 987,
                "start_at": "2012-07-20T15:00:00-06:00",
                "end_at": "2012-07-20T15:00:00-06:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "Appointment"
            }
          },
          "context_codes": {
            "description": "The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.",
            "example": [
              "course_123"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sub_context_codes": {
            "description": "The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to",
            "example": [
              "course_section_234"
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "workflow_state": {
            "description": "Current state of the appointment group ('pending', 'active' or 'deleted'). 'pending' indicates that it has not been published yet and is invisible to participants.",
            "example": "active",
            "type": "string",
            "allowableValues": {
              "values": [
                "pending",
                "active",
                "deleted"
              ]
            }
          },
          "requiring_action": {
            "description": "Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it's reservable and the min_appointments_per_participant limit has not been met by this user).",
            "example": true,
            "type": "boolean"
          },
          "appointments_count": {
            "description": "Number of time slots in this appointment group",
            "example": 2,
            "type": "integer"
          },
          "appointments": {
            "description": "Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information",
            "example": [],
            "type": "array",
            "items": {
              "$ref": "CalendarEvent"
            }
          },
          "new_appointments": {
            "description": "Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added",
            "example": [],
            "type": "array",
            "items": {
              "$ref": "CalendarEvent"
            }
          },
          "max_appointments_per_participant": {
            "description": "Maximum number of time slots a user may register for, or null if no limit",
            "example": 1,
            "type": "integer"
          },
          "min_appointments_per_participant": {
            "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots",
            "example": 1,
            "type": "integer"
          },
          "participants_per_appointment": {
            "description": "Maximum number of participants that may register for each time slot, or null if no limit",
            "example": 1,
            "type": "integer"
          },
          "participant_visibility": {
            "description": "'private' means participants cannot see who has signed up for a particular time slot, 'protected' means that they can",
            "example": "private",
            "type": "string",
            "allowableValues": {
              "values": [
                "private",
                "protected"
              ]
            }
          },
          "participant_type": {
            "description": "Indicates how participants sign up for the appointment group, either as individuals ('User') or in student groups ('Group'). Related to sub_context_codes (i.e. 'Group' signups always have a single group category)",
            "example": "User",
            "type": "string",
            "allowableValues": {
              "values": [
                "User",
                "Group"
              ]
            }
          },
          "url": {
            "description": "URL for this appointment group (to update, delete, etc.)",
            "example": "https://example.com/api/v1/appointment_groups/543",
            "type": "string"
          },
          "html_url": {
            "description": "URL for a user to view this appointment group",
            "example": "http://example.com/appointment_groups/1",
            "type": "string"
          },
          "created_at": {
            "description": "When the appointment group was created",
            "example": "2012-07-13T10:55:20-06:00",
            "type": "datetime"
          },
          "updated_at": {
            "description": "When the appointment group was last updated",
            "example": "2012-07-13T10:55:20-06:00",
            "type": "datetime"
          }
        }
      },
      "AuthenticationProvider": {
        "id": "AuthenticationProvider",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "identifier_format": {
            "description": "Valid for SAML providers.",
            "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
            "type": "string"
          },
          "auth_type": {
            "description": "Valid for all providers.",
            "example": "saml",
            "type": "string"
          },
          "id": {
            "description": "Valid for all providers.",
            "example": 1649,
            "type": "integer"
          },
          "log_out_url": {
            "description": "Valid for SAML providers.",
            "example": "http://example.com/saml1/slo",
            "type": "string"
          },
          "log_in_url": {
            "description": "Valid for SAML and CAS providers.",
            "example": "http://example.com/saml1/sli",
            "type": "string"
          },
          "certificate_fingerprint": {
            "description": "Valid for SAML providers.",
            "example": "111222",
            "type": "string"
          },
          "requested_authn_context": {
            "description": "Valid for SAML providers.",
            "type": "string"
          },
          "auth_host": {
            "description": "Valid for LDAP providers.",
            "example": "127.0.0.1",
            "type": "string"
          },
          "auth_filter": {
            "description": "Valid for LDAP providers.",
            "example": "filter1",
            "type": "string"
          },
          "auth_over_tls": {
            "description": "Valid for LDAP providers.",
            "type": "integer"
          },
          "auth_base": {
            "description": "Valid for LDAP and CAS providers.",
            "type": "string"
          },
          "auth_username": {
            "description": "Valid for LDAP providers.",
            "example": "username1",
            "type": "string"
          },
          "auth_port": {
            "description": "Valid for LDAP providers.",
            "type": "integer"
          },
          "position": {
            "description": "Valid for all providers.",
            "example": 1,
            "type": "integer"
          },
          "idp_entity_id": {
            "description": "Valid for SAML providers.",
            "example": "http://example.com/saml1",
            "type": "string"
          },
          "login_attribute": {
            "description": "Valid for SAML providers.",
            "example": "nameid",
            "type": "string"
          },
          "sig_alg": {
            "description": "Valid for SAML providers.",
            "example": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
            "type": "string"
          },
          "jit_provisioning": {
            "description": "Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).",
            "type": "boolean"
          },
          "federated_attributes": {
            "$ref": "FederatedAttributesConfig"
          },
          "mfa_required": {
            "description": "If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.",
            "type": "boolean"
          }
        }
      },
      "SSOSettings": {
        "id": "SSOSettings",
        "description": "Settings that are applicable across an account's authentication configuration, even if there are multiple individual providers",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "login_handle_name": {
            "description": "The label used for unique login identifiers.",
            "example": "Username",
            "type": "string"
          },
          "change_password_url": {
            "description": "The url to redirect users to for password resets. Leave blank for default Canvas behavior",
            "example": "https://example.com/reset_password",
            "type": "string"
          },
          "auth_discovery_url": {
            "description": "If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.",
            "example": "https://example.com/which_account",
            "type": "string"
          },
          "unknown_user_url": {
            "description": "If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.",
            "example": "https://example.com/register_for_canvas",
            "type": "string"
          }
        }
      },
      "FederatedAttributesConfig": {
        "id": "FederatedAttributesConfig",
        "description": "A mapping of Canvas attribute names to attribute names that a provider may send, in order to update the value of these attributes when a user logs in. The values can be a FederatedAttributeConfig, or a raw string corresponding to the \"attribute\" property of a FederatedAttributeConfig. In responses, full FederatedAttributeConfig objects are returned if JIT provisioning is enabled, otherwise just the attribute names are returned.",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "admin_roles": {
            "description": "A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.",
            "type": "string"
          },
          "display_name": {
            "description": "The full display name of the user",
            "type": "string"
          },
          "email": {
            "description": "The user's e-mail address",
            "type": "string"
          },
          "given_name": {
            "description": "The first, or given, name of the user",
            "type": "string"
          },
          "integration_id": {
            "description": "The secondary unique identifier for SIS purposes",
            "type": "string"
          },
          "locale": {
            "description": "The user's preferred locale/language",
            "type": "string"
          },
          "name": {
            "description": "The full name of the user",
            "type": "string"
          },
          "sis_user_id": {
            "description": "The unique SIS identifier",
            "type": "string"
          },
          "sortable_name": {
            "description": "The full name of the user for sorting purposes",
            "type": "string"
          },
          "surname": {
            "description": "The surname, or last name, of the user",
            "type": "string"
          },
          "timezone": {
            "description": "The user's preferred time zone",
            "type": "string"
          }
        }
      },
      "FederatedAttributeConfig": {
        "id": "FederatedAttributeConfig",
        "description": "A single attribute name to be federated when a user logs in",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "attribute": {
            "description": "The name of the attribute as it will be sent from the authentication provider",
            "type": "string",
            "example": "mail"
          },
          "provisioning_only": {
            "description": "If the attribute should be applied only when provisioning a new user, rather than all logins",
            "type": "boolean",
            "default": false,
            "example": false
          }
        }
      },
      "AuthenticationEvent": {
        "id": "AuthenticationEvent",
        "description": "",
        "required": [],
        "deprecated": false,
        "deprecation_description": null,
        "properties": {
          "created_at": {
            "description": "timestamp of the event",
            "example": "2012-07-19T15:00:00-06:00",
            "type": "datetime"
          },
          "event_type": {
            "description": "authentication event type ('login' or 'logout')",
            "example": "login",
            "type": "string",
            "allowableValues": {
              "values": [
                "login",
                "logout"
              ]
            }
          },
          "pseudonym_id": {
            "description": "ID of the pseudonym (login) associated with the event",
            "example": 9478,
            "type": "integer"
          },
          "account_id": {
            "description": "ID of the account associated with the event. will match the account_id in the associated pseudonym.",
            "example": 2319,
            "type": "integer"
          },
          "user_id": {
            "description": "ID of the user associated with the event will match the user_id in the associated pseudonym.",
            "example": 362,
            "type": "integer"
          }
        }
      }
    }
  }